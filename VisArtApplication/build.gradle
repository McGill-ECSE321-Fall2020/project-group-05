/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.6.1/userguide/java_library_plugin.html
 */

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
    id 'org.springframework.boot' version '2.3.4.RELEASE' // Spring-Boot
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'// Spring-Boot
    id 'java'// Spring-Boot
    id 'jacoco'
}

sourceCompatibility = '1.8'
group = 'com.ecse.321.visart'
version = '0.0.1-SNAPSHOT'

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()// Spring-boot
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'
    
    // https://mvnrepository.com/artifact/com.google.firebase/firebase-admin
    // firebase custom token authentication --->
	compile group: 'com.google.firebase', name: 'firebase-admin', version: '7.0.1'
    
	// https://mvnrepository.com/artifact/org.springframework.security/spring-security-core
	compile group: 'org.springframework.security', name: 'spring-security-core', version: '5.4.1'
	
	
    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:29.0-jre'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.13'

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	runtimeOnly 'org.postgresql:postgresql'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	
	testImplementation 'org.mockito:mockito-core:2.+'
	testImplementation 'org.mockito:mockito-junit-jupiter:2.18.3'
	
	//testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
	//testImplementation 'org.junit.platform:junit-platform-launcher:1.4.1'
}

test {
    useJUnitPlatform()

    environment "JDBC_DATABASE_URL","jdbc:postgresql://ec2-34-200-106-49.compute-1.amazonaws.com:5432/d1fa9t0eht8kmf?password=8aa27235bd628d960a06b94da267acd22842e00556aecad5ac331094b6c0b9a8&sslmode=require&user=ujosysdilonyjy"
    environment "DATABASE_URL","postgres://ujosysdilonyjy:8aa27235bd628d960a06b94da267acd22842e00556aecad5ac331094b6c0b9a8@ec2-34-200-106-49.compute-1.amazonaws.com:5432/d1fa9t0eht8kmf"
    environment "SPRING_DATASOURCE_URL","jdbc:postgresql://ec2-34-200-106-49.compute-1.amazonaws.com:5432/d1fa9t0eht8kmf?password=8aa27235bd628d960a06b94da267acd22842e00556aecad5ac331094b6c0b9a8&sslmode=require&user=ujosysdilonyjy"
    environment "SPRING_DATASOURCE_USERNAME","ujosysdilonyjy"
    environment "SPRING_DATASOURCE_PASSWORD","8aa27235bd628d960a06b94da267acd22842e00556aecad5ac331094b6c0b9a8"
    systemProperty "spring.datasource.url", "jdbc:postgresql://ec2-34-200-106-49.compute-1.amazonaws.com:5432/d1fa9t0eht8kmf?password=8aa27235bd628d960a06b94da267acd22842e00556aecad5ac331094b6c0b9a8&sslmode=require&user=ujosysdilonyjy"
}
springBoot {
    mainClassName = 'com.ecse321.visart.DemoApplication'

}

ext {
    umpleLanguage = 'Java'
    umpleOutputPath = '../java'
    umpleFilePath = 'src/main/resources/visart.ump'
}

tasks.register("compileUmple") {
    group = 'Build'
    description = 'Compiles and generates the umple code'
    // dependsOn 'build'
    doLast {
        javaexec {
            main="-jar";
            args = [
                "libs/umple.jar",
                umpleFilePath,
                "-g",
                umpleLanguage,
                "--path",
                umpleOutputPath
            ]
        }
    }
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.3
			}
		}
	}
}

task integrationTest(type: Exec) {
	dependsOn 'bootJar'
	
    commandLine 'python','--version'
    commandLine 'pip','install','-r','requirements.txt'
    commandLine 'python','integrationTest.py'
    // if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        // on windows
        // commandLine 'cmd','/c','VisArtApplication\\integrationTest.bat'
    // } else {
        // on linux
        // commandLine 'python','integrationTest.py'
        // commandLine './VisArtApplication/integrationTest.sh'
    // }
}